package com.imp.prgs;

public class Segregate0and1 {
	public static void main(String[] args) {
		int arr[] = new int[] { 0, 1, 0, 1, 1, 1 };
		int arr2[] = new int[] { 0, 1, 0, 1, 1, 1 };
		int arr3[] = new int[] { 0, 1, 0, 1, 1, 1 };
		int n = arr.length;
		
		System.out.println("original Arrays:==============>");
		print(arr, n);
		
		System.out.println("\n=======Approach-1==========");
		segregate0and1(arr, n);
		print(arr, n);
		System.out.println("\n=======Approach-2==========");
		segregate0and1_2(arr2);
		print(arr2, arr2.length);
		System.out.println("\n=======Approach-3==========");
		separate0s1sSolution3(arr3);
		print(arr3, arr3.length);
	}

	static void segregate0and1(int arr[], int n) {
		int count = 0; // counts the no of zeros in arr

		for (int i = 0; i < n; i++) {
			if (arr[i] == 0)
				count++;
		}

		for (int i = 0; i < count; i++)
			arr[i] = 0;

		// loop fills remaining arr space with 1
		for (int i = count; i < n; i++)
			arr[i] = 1;
	}

	static void segregate0and1_2(int arr[]) {

		int left = 0;
		int rt = arr.length - 1;
		while (left < rt) {
			if (arr[left] == 1) {
				arr[rt] = arr[rt] + arr[left];
				arr[left] = arr[rt] - arr[left];
				arr[rt] = arr[rt] - arr[left];
				rt--;
			} else {
				left++;
			}
		}
	}

	public static int[] separate0s1sSolution3(int arr[]) {
		for (int i = 0; i < arr.length; i++) {
			int left = 0;
			int right = arr.length - 1;
			while (arr[left] == 0) {
				left++;
			}
			while (arr[right] == 1) {
				right--;
			}

			if (left < right) {
				int temp = arr[left];
				arr[left] = arr[right];
				arr[right] = temp;
			}
		}
		return arr;
	}

	// function to print segregated array
	static void print(int arr[], int n) {
		
		for (int i = 0; i < n; i++)
			System.out.print(arr[i] + " ");
	}
}

//output

original Arrays:==============>
0 1 0 1 1 1 
=======Approach-1==========
0 0 1 1 1 1 
=======Approach-2==========
0 0 1 1 1 1 
=======Approach-3==========
0 0 1 1 1 1 
